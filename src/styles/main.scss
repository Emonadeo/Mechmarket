@use 'sass:list';
@use 'typography';
@use 'color';
@use 'reset';
@use 'shape';
@use 'responsive' as r;

* {
    box-sizing: border-box;
}

// build typography classes
@each $type, $props in typography.$typography {
    .type-#{$type} {
        @each $prop, $value in $props {
            @if $prop == 'before' {
                &::before {
                    content: '';
                    margin-top: $value;
                    display: block;
                    height: 0;
                }
            } @else if $prop == 'after' {
                &::after {
                    content: '';
                    margin-bottom: $value;
                    display: block;
                    height: 0;
                }
            } @else {
                #{$prop}: #{$value};
            }
        }
    }
}

// build color classes
@each $color, $values in color.$map {
    .#{$color} {
        $bg: list.nth($values, 1);
        $fg: list.nth($values, 2);

        background-color: $bg;
        color: $fg;
        border-color: $fg;

        svg {
            fill: $fg;
        }
    }
}

// markdown adjustments
.markdown {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    td {
        overflow-wrap: break-word;
        word-break: break-word;

        @include r.lg {
            max-width: 36rem;
            margin: 0 auto;
        }
    }

    table {
        $border: 2px solid rgba(var(--on-surface), color.$alpha-focus);

        border: $border;
        width: 100%;
        border-spacing: 0;
        border-collapse: collapse;
        overflow: auto;

        td,
        th {
            padding: 1rem;
            min-width: 6em;

            &:not(:last-child) {
                border-right: $border;
            }
        }

        tr:not(:last-child) {
            border-bottom: $border;
        }
    }
}
