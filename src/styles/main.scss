@use 'sass:list';
@use 'sass:map';
@use 'typography';
@use 'color';
@use 'reset';
@use 'shape';
@use 'responsive' as r;

* {
    box-sizing: border-box;
}

// build typography classes
@mixin type($type, $props) {
    @each $prop, $value in $props {
        @if $prop == 'before' {
            &::before {
                content: '';
                margin-top: $value;
                display: block;
                height: 0;
            }
        } @else if $prop == 'after' {
            &::after {
                content: '';
                margin-bottom: $value;
                display: block;
                height: 0;
            }
        } @else {
            #{$prop}: #{$value};
        }
    }
}

@each $type, $props in typography.$typography {
    @if (list.index((h1, h2, h3, h4, h5, h6), $type) != null) {
        .markdown #{$type} {
            @include type($type, $props);
        }
    }
    @if ($type == 'body1') {
        p,
        .markdown li {
            @include type($type, $props);
        }

        .markdown li {
            margin-bottom: map.get($props, line-height) / 2;
        }
    }
    .type-#{$type} {
        @include type($type, $props);
    }
}

// build color classes
@each $color, $values in color.$map {
    .#{$color} {
        $bg: list.nth($values, 1);
        $fg: list.nth($values, 2);

        background-color: $bg;
        color: $fg;
        border-color: $fg;

        svg {
            fill: $fg;
        }
    }
}

// markdown adjustments
.markdown {
    width: 100%;

    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    td,
    ol,
    ul {
        overflow-wrap: break-word;
        word-break: break-word;

        @include r.lg {
            max-width: typography.$max-line-width;
            margin: 0 auto;
        }
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    ol,
    ul,
    table {
        margin-bottom: 2rem;
    }

    ol,
    ul {
        padding-inline-start: 2rem;
    }

    ul {
        list-style-type: '\2014';
    }

    li {
        padding-left: 0.5em;
    }

    a {
        border-bottom-style: solid;
        border-bottom-width: 1px;

        &:hover {
            background-color: rgba(var(--primary), color.$alpha-hover);
        }

        &:focus {
            background-color: rgba(var(--primary), color.$alpha-focus);
        }
    }

    hr {
        margin: 2rem 0;
        border-right: none;
        border-left: none;
        border-bottom: none;
        border-top-style: solid;
    }

    table {
        $border: 2px solid rgba(var(--on-surface), color.$alpha-focus);

        display: block;
        border: $border;
        width: 100%;
        border-spacing: 0;
        border-collapse: collapse;
        overflow-x: auto;

        td,
        th {
            padding: 1rem;
            min-width: 8em;

            &:not(:last-child) {
                border-right: $border;
            }
        }

        tr:not(:last-child) {
            border-bottom: $border;
        }
    }

    > *:last-child {
        margin-bottom: 0;
    }
}
