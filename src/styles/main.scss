@use 'sass:list';
@use 'sass:map';
@use 'typography';
@use 'color';
@use 'reset';
@use 'shape';
@use 'markdown';
@use 'mixins';
@use 'responsive' as r;

* {
    box-sizing: border-box;

    scrollbar-color: color.$on-surface transparent;
    scrollbar-width: thin;

    &::-webkit-scrollbar {
        width: 2 * shape.$radius;
        height: 2 * shape.$radius;
    }

    &::-webkit-scrollbar-thumb {
        background-color: color.$surface;
        border: shape.$border;
        border-radius: shape.$radius;

        &:hover {
            background-color: color.$on-surface;
        }
    }
}

// build typography classes
@each $type, $props in typography.$typography {
    @if (list.index((h1, h2, h3, h4, h5, h6), $type) != null) {
        .markdown #{$type} {
            @include mixins.type($props);
        }
    }
    @if ($type == 'body') {
        p,
        td,
        th,
        .markdown li {
            @include mixins.type($props);
        }

        .markdown li {
            margin-bottom: map.get($props, line-height) - 12px;
        }
    }
    .type-#{$type} {
        @include mixins.type($props);
    }
}

// build color classes
@each $color, $values in color.$map {
    .#{$color} {
        $bg: list.nth($values, 1);
        $fg: list.nth($values, 2);

        background-color: $bg;
        color: $fg;
        border-color: $fg;

        svg {
            fill: $fg;
        }
    }
}

// special surface type changing to background on larger devices
.modal {
    background-color: color.$surface;
    color: color.$on-surface;
    border-color: color.$on-surface;

    svg {
        fill: color.$on-surface;
    }

    @include r.md {
        background-color: color.$background;
        color: color.$on-background;
        border-color: color.$on-background;

        svg {
            fill: color.$on-background;
        }
    }
}
